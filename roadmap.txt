une fourchette = un mutex

donc un tableau de philosophe qui sont des struct et un tableau de fourchette qui sont des mutex

usleep = params en ms

//////////// .h

 üìäStructure Philosophe { 
 philo_index  ;
 fourchette de droite ; 
 fourchette de gauche ; 
 nombre de repas mang√©s ;
 boolean est-il-rassasi√©? ; 
 philo_mutex ;
 heure du dernier repas ; 
 pointeur fourchette de droite et pointeur fourchette de gauche ;
 pthread_t thread_id 
 pointeur vers le data data_container
  ...}

üìäStructure fourchette { 
    type_mutex fourchette ;
    id de la fourchette ;
}


üìästructure data_container { nombre de philo ;
 time to die ;
 time to eat;
 time to sleep ; 
 nombre de repas max ;
 heure ou demarre la simu ;
 bool is_end? philo die : all philo full
 t_pthread monitor;
 dc_mutex; eviter les data race quand on lis le dc
 write_mutex ;
 long thread_runings_nbr;
 bool all_thread_ready;
 tableau des fourchette t_fork *forks 
 tableau de philosophe t_philo *philos }

üìäenum OPcode pour les wrapper des fonction threads et mutex
{
    LOCK,
    UNLOCK,
    INIT,
    DESTROY,
    CREATE,
    JOIN,
    DETACH,
}

üìäenum e_time_code {
    SECONDS,
    MILLISECONDS,
    MICROSECONDS,
}   t_time_code

üìä enum e_philo_state {

    SLEEPING,
    THINKING,
    EATING
    TAKING RIGHT FORK,
    TAKING LEFT FORK,
    DIED,
}   t_philo_state

///////////  principles

promtpt ex : ./philo nb_phil ttdie tteat ttsleep [nbmaxmeal]

0Ô∏è‚É£////////// main

data_container instance;

Argc correct ? lauch : error msg with err func {ft_printf(custom err msg) + exit FAILURE}

üìù in .h implement colors macro (chat gpt gen)


if correct : 1) parse_input(&data_container, av) in data_container 
             2) init_values(&data_container) (malloc philo, fourchette, )
             3) start simulation(&data_container )
             4) clean table (no leaks ;-)) if philo died | all philo are full 



1Ô∏è‚É£////////// parsing

üõ†Ô∏èatol -> valid input() ? check negative ; nbr is legit (   +--7234^&S‚úÖ, +-&^^744‚ùå) ; INT MAX > ?
ret pointeur to nbr

üõ†Ô∏è valid_input{
    
    // skip spaces

    // sign handling : if - error()

    Si tout ses test ont ete pass√©s char *nbr = string d'entree
}

parse_intput {
    
    data_container->philo_nbr = atol(av[1])
    
    data_container->ttdie = atol(av[2]) * 1e3
    
    data_container->tteat = atol(av[3]) * 1e3
    
    data_container->ttsleep = atol(av[4]) * 1e3

    errorexit si un des parametre <60ms (6e4)

    si av[5]
        data_container->max_meal = atol(av[5])
    sinon
        data_container->max_meal = -1;
    
    üìù tester en printant tous les parametres precedemment initialis√©s
    üìù ajouter au .h
}

2Ô∏è‚É£//////////// data_init

// safe func

üõ†Ô∏è safe malloc is a wrapper to protect malloc in 1line

üõ†Ô∏è safemutex_handle(*mutex, opcode) = si opcode = LOCK -> handlemuterr(mutex_lock, opcode) sinon si .. : error_exit() 
                                                                    ^^ 0 ou un status

üõ†Ô∏è safe_thread_handle(*thread, void *(*foo)(void *), void *data, opcode) = == ^^

// err_handle

üõ†Ô∏è handle_mut_err(int status, opcode)
{
    üìùpour les msg d'erreur checker les MAN()

    si le status = 0 tout est bon la fonction est bien exec
    
    si le status == EINVAL et que l'op code == LOCK || UNLOCK : valeur invalide pour le mutex
    
    sinon si status == EINVAL et op code == INIT : valeur de l'attribut invalide
    
    sinon si status = EDEADLK : error_exit(err apporpriee)
    
    sinon si status = EPERM : error_exit
    
    sinon si status = EBUSY : error_exit(mutex bloqu√©)
}

üõ†Ô∏è  üü• pareil pour les threads err

// üõ†Ô∏è assinger une fourchette(philo, dc->forks, i = philo position (le premier etant le philo 1 a la position 0)){

    int nbrphilo = philo->dc->philo_nbr
    
    üìù on peut renommer right_fork et left_fork en first_fork et second_fork 
    üìùla fourchette de droite est egale a la position du philo donc
    üìùla fourchette de gauche est egale a la position du philo + 1 % philo nbr
    üìùEX : fourchette de gauche du 5eme philo = fourchettes[4 (pos dans le tableau) + 1 % 5 (nbr de philo)]
    üìùainsi la fourchette de gauche du dernier philo est la premiere fourchette du tableau

    üìù Je pars sur la solution des impairs mais voir algo Dijsktra

    philo->right/first_fork = &forks[(position + 1) % philonbr]
    
    philo->left/second_fork = &forks[position]
    
    if (philo->id %2 == 0)
        philo->right/first_fork = &forks[position]
        philo->left/second_fort = &forks[(position + 1) % philonbr]

}

// üõ†Ô∏è void philo init(dc) {
    
    int i;
    
    t_philo *philo

    tant que i < philonbr
        philo = table->philo + i 
        dc->philo_id = i + 1; philo nb is 0 if not + 1
        is_full = false
        meals counter = 0
        philo->dc = dc
        safe_mutex_handle(&philo->philo_mutex, INIT);
        assinger une fourchette(philo, dc->forks, i = position dans le tableau)        
}

data_init{
    
    is_end = false;
    
    all_thread_ready = false;
    
    dc->thread_runings_nbr  = 0

    tableau_philo = üõ†Ô∏è safemalloc(sizeof(t_philo) * philonbr) 
    
    üõ†Ô∏è safe_mutex_handle(&dc->dc_mutex, INIT)
    
    üõ†Ô∏è safe_mutex_handle(&dc->write_mutex, INIT)

    üìù init tableau de mutex pour les fourchettes
    tableau_fourchette = üõ†Ô∏è safemalloc(sizeof(t_fork) * philonbr)
    
    tant que i < nb philo
        üõ†Ô∏è safe_mutex_handle(&data_container->forks[i].fork, INIT as opcode)
        data_container->forks[i].fork_id = i;
    
    üõ†Ô∏è philo_init(data_container)
}

3Ô∏è‚É£/////////// Dinner start
üìù create dinner.c 
promtpt ex : ./philo nb_phil ttdie tteat ttsleep [nbmaxmeal]

üìù create getters&setters.c pour eviter d'ecrire LOCK + DO + UNLOCK

// üõ†Ô∏è void set_bools(*mutex, bool *dest, bool value)
    safe_mutex_handle(mutex, LOCK)
    *dest = value
    safe_mutex_handle(mutex, UNLOCK)

// üõ†Ô∏è bool get_bools(*mutex, bool *value)
    
    bool ret;

    safe_mutex_handle(mutex, LOCK)
    ret = *value
    safe_mutex_handle(mutex, UNLOCK)
    return ret

    üü• == for long just change the datatype

// üõ†Ô∏è wrapper get_bool = sim_finished(*dc){
    
    return(get_bool(&dc->dc_mutex, &dc->is_end))

}

üìù SPINLOCK in an other file.c 

// üõ†Ô∏è wait_all_thread(*dc)
{
    while(!get_bool(&dc->dc_mutex, &dc->all_thread_ready))
        ;
}

// üõ†Ô∏è bool all_runing()
{

}

// üõ†Ô∏è sharp_usleep()
{
     oceano 1:20:00
}

// üõ†Ô∏è write_state(){
    oceano 1:25:00
}
// üõ†Ô∏è gettime(t_time_code time_code){
    
    struct timeval  tv;
    if (gettimeofday(&tv, NULL))
        error_exit;
    if (time_code == SECOND)
       return (tv.tv_sec + (tv.t_usec)/1e6)
    else if (timecode == MILLISECONDS)
        return (tv.tv_sec * 1e3 + (tv.t_usec/1e3))
    else if (timecode == MICROSECONDS)
        return(tv.tv_sec * 1e6 + tv.tv_usec)
    else
        error_exit(gettime bad inputs)
    return 42
}

// üõ†Ô∏è eat(*philo){

    1)

    safe_mutex_handle(&philo->first_fork->fork, LOCK)
    write_state(TAKE FIRST FORK, philo)
    safe_mutex_handle(&philo->second_fork->fork, LOCK)
    write_state(TAKE SECOND FORK, philo)

    2)
    
    set_long(philo->philo_mutex, &last_meal_time, gettime(MILLISECONDS))
    philo->meals_counter++;
    write_state(EATING, philo)
    sharp_usleep(philo->dc->tteat, philo->dc)
    if (philo->dc->max_meal > 0 && philo->meals_counter == philo->dc->max_meal)
        set_bools(philo->philo_mutex, &is_full, true)

    safe_mutex_handle(&philo->first_fork->fork, UNLOCK)
    safe_mutex_handle(&philo->second_fork->fork, UNLOCK)

}

// üõ†Ô∏è thinking(*philo) {

    write_state(THINKING, philo);
}

// üõ†Ô∏è monitor_dinner(void *data) {
    *dc = (t_dc*)data;

    while(!all_runing()) // oceano 1:41 
        ;

    while (!sim_finished(dc))
        while (i < dc->philo_nbr && !sim_finished(dc ))
         if (philo_died(dc->philos)) // oceano 1:44 
            set_bools(&dc->dc_mutex, &dc->is_end, true)
            write_state(DIED, dc->philo) 
}   

// üõ†Ô∏è void *dinner_simulation(void *data) {
    
    t_philo *philo = (t_philo *)data 
    
    üìù Spinlock
    wait_all_thread(philo->dc) //to synchronize running 

    üìù set last meal time
    set_long(&philo->philo_mutex, &philo->last_meal_time, gettime(MILLISECONDS ))
    increase_long(&philo->dc->dc_mutex, &philo->dc->thread_runings_nbr) // oceano 1:39
    
    while (!sim_finished(philo->dc))
        si le philo est full
            break
        eat(philo);

        // sleep
        write_state(SLEEPING, philo)
        sharp_usleep(philo->dc->ttsleep, philo->dc)

        thinking(philo);

}


si dc->max meals = 0 : return

sinon si il n'y a qu'un philo : lone_philo // oceano 1:48

sinon : tant que i < philo_nbr
    
    üìù &dinner_simulation() == dinner_simulation
    safe_thread_handle(thread = &dc->philo[i].thread_id, pointer_func = dinner_simulation,
    
    data = &dc->philos[i], opcode = CREATE)

üìù death monitor
safe_thread_handle(&dc->monitor, monitor_dinner, dc, CREATE)

üìù time that sim start
dc->start_simulation =  gettime(MILLISECONDS)

üìù donner a la valeur all_thread_ready la valeur true avec le LOCK/UNLOCK ing de mutex adequat
set_bools(mutex = &dc->dc_mutex, bool *dest = &dc->all_thread_ready, value = true)

tant que i < nb_philos
    safe_thread_handle(&dc->philos[i].thread_id, NULL , NULL, JOIN)

safe_thread_handle(&table->monitor, NULL, NULL, JOIN)



REMAINING CLEAN WITH NO LEAKS




1. Structures de Donn√©es
Philosophe
philo_index : Indice du philosophe, pour identifier chaque thread/philosophe.
fourchette de droite/gauche : R√©f√©rence aux fourchettes que le philosophe tente de saisir.
nombre de repas mang√©s : Compteur du nombre de repas que le philosophe a mang√©s.
est-il-rassasi√© : Bool√©en indiquant si le philosophe a atteint son nombre maximal de repas.
philo_mutex : Mutex pour prot√©ger l'acc√®s aux donn√©es critiques du philosophe.
heure du dernier repas : Temps depuis le dernier repas du philosophe.
pointeurs fourchette de droite/gauche : Pointeurs vers les fourchettes adjacentes.
pthread_t thread_id : Identifiant du thread associ√© √† ce philosophe.
pointeur vers le data data_container : R√©f√©rence √† la structure principale pour acc√©der aux donn√©es globales.
Fourchette
type_mutex fourchette : Mutex pour synchroniser l'acc√®s √† chaque fourchette.
id de la fourchette : Identifiant unique de chaque fourchette.
Data Container
nombre de philo : Nombre total de philosophes.
time to die, eat, sleep : Temps limite pour mourir, manger et dormir.
nombre de repas max : Nombre maximal de repas qu'un philosophe peut manger avant d'√™tre rassasi√©.
heure ou d√©marre la simu : Heure √† laquelle la simulation commence.
is_end? : Bool√©en indiquant si la simulation est termin√©e.
monitor : Thread de surveillance pour surveiller la mort des philosophes.
dc_mutex : Mutex pour prot√©ger l'acc√®s aux donn√©es globales.
write_mutex : Mutex pour prot√©ger l'acc√®s aux fonctions d'√©criture (√©criture dans la console par exemple).
thread_runings_nbr : Nombre de threads en cours d'ex√©cution.
all_thread_ready : Indique si tous les threads sont pr√™ts √† d√©marrer.
tableau des fourchette/philosophe : Tableaux des fourchettes et philosophes.
2. Fonctions Principales
2.1. Parsing et Initialisation
parse_input : Fonction pour parser les arguments de la ligne de commande et initialiser les valeurs dans data_container.
Conversion des entr√©es en entiers, gestion des erreurs, et conversion des temps en microsecondes.
init_values : Fonction pour allouer de la m√©moire aux tableaux de philosophes et fourchettes, et initialiser les mutex associ√©s.
Utilisation de safe_malloc pour √©viter les erreurs d'allocation m√©moire.
Initialisation des mutex pour les philosophes et les fourchettes.
2.2. Simulation
start_simulation : Lance la simulation en cr√©ant un thread pour chaque philosophe, ainsi qu'un thread de surveillance (monitor_dinner).

Utilisation de safe_thread_handle pour g√©rer la cr√©ation de threads en toute s√©curit√©.
Le thread de surveillance surveille si un philosophe meurt (si le temps depuis son dernier repas d√©passe time to die).
dinner_simulation : Fonction principale ex√©cut√©e par chaque thread de philosophe.

Un philosophe tente de prendre ses fourchettes (mutex), mange, dort, et pense.
Gestion des √©tats des philosophes (EATING, SLEEPING, THINKING).
2.3. Synchronisation
safe_mutex_handle et safe_thread_handle : Wrappers pour manipuler en toute s√©curit√© les mutex et threads (init, lock, unlock, destroy, etc.).
Gestion des erreurs via handle_mut_err pour s'assurer que les op√©rations sur les mutex et les threads se d√©roulent correctement.
2.4. Monitor
monitor_dinner : Thread de surveillance pour surveiller si un philosophe meurt.
V√©rifie p√©riodiquement si le temps depuis le dernier repas d'un philosophe a d√©pass√© time to die.
3. Flux Global du Programme
Initialisation :

Le programme commence par parser les arguments d'entr√©e et initialise toutes les structures de donn√©es n√©cessaires.
Alloue la m√©moire pour les philosophes et les fourchettes, et initialise les mutex.
Simulation :

Chaque philosophe est ex√©cut√© dans un thread s√©par√©.
Un thread de surveillance est lanc√© pour monitorer la mort des philosophes.
Les philosophes passent par des cycles d'activit√© : prendre les fourchettes, manger, dormir, et penser.
Fin de Simulation :

La simulation se termine si un philosophe meurt ou si tous les philosophes ont mang√© le nombre maximal de repas.
Tous les threads sont joints (JOIN), et les ressources allou√©es sont lib√©r√©es (√©viter les fuites m√©moire).